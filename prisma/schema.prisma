// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int       @id @default(autoincrement())
  username         String    @db.VarChar(20)
  email            String    @unique @db.VarChar(50)
  password         String    @db.VarChar(255)
  avatar_url       String?   @db.VarChar(255)
  is_disabled      Boolean   @default(false)
  is_authenticated Boolean   @default(false)
  created_at       DateTime  @default(now())
  disabled_at      DateTime?
  token            String?   @db.VarChar(4)
  google_id        String?
  google_email     String?
  jobs             Job[]

  @@map("users")
}

model Job {
  id          Int        @id @default(autoincrement())
  title       String     @db.VarChar(50)
  description String?    @db.Text
  link        String     @db.VarChar(255)
  created_at  DateTime   @default(now())
  user        User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     Int
  company     Company?
  recruiter   Recruiter?
  progress    Progress?

  @@map("jobs")
}

model Company {
  id       Int    @id @default(autoincrement())
  name     String @db.VarChar(50)
  linkedin String @db.VarChar(255)
  website  String @db.VarChar(255)
  logo_url String @db.VarChar(255)
  job      Job    @relation(fields: [job_id], references: [id])
  job_id   Int    @unique

  @@map("companies")
}

model Recruiter {
  id       Int    @id @default(autoincrement())
  name     String @db.VarChar(20)
  linkedin String @db.VarChar(255)
  job      Job    @relation(fields: [job_id], references: [id])
  job_id   Int    @unique

  @@map("recruiters")
}

model Progress {
  id          Int          @id @default(autoincrement())
  is_finished Boolean      @default(false)
  updated_at  DateTime     @updatedAt()
  meeting_at  DateTime?
  status      STATUS       @default(PENDING)
  job         Job          @relation(fields: [job_id], references: [id])
  job_id      Int          @unique
  checkpoints Checkpoint[]

  @@map("progress")
}

model Checkpoint {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(50)
  description String?  @db.Text
  created_at  DateTime @default(now())
  progress    Progress @relation(fields: [progress_id], references: [id])
  progress_id Int

  @@map("checkpoints")
}

enum STATUS {
  PENDING
  POSITIVE
  NEGATIVE
}
